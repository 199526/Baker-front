name: $(Date:yyyyMMdd)$(Rev:.r)_e2e

variables:
- name: SUBSCRIPTION_ID
  value: 8ecadfc9-d1a3-4ea4-b844-0d9f87e4d7c8 # ACS Test
- name: RESOURCE_GROUP_NAME
  value: agentbaker-e2e-tests
- name: LOCATION
  value: eastus
- name: CLUSTER_NAME
  value: agentbaker-e2e-test-cluster
- group: ab-e2e

pool:
  name: 1ES-AKS-Elastic-DevInfra-Normal-Pool

jobs:
- job: E2E
  steps:
  - bash: |
      az login --service-principal -u $(AZURE_CLIENT_ID) -p $(AZURE_CLIENT_SECRET) --tenant $(AZURE_TENANT_ID)
      az account set -s $(AZURE_SUBSCRIPTION_ID)
    displayName: az login
  - bash: bash .pipelines/scripts/setup_go.sh
    displayName: setup go
  - bash: |
      go version
      cd e2e
      bash ./e2e-starter.sh
    displayName: run e2e
  - publish: $(System.DefaultWorkingDirectory)/e2e
    artifact: logs
    condition: always()
  - bash: |
      #az vmss delete -g $(jq -r .group e2e/vmss.json) -n $(jq -r .vmss e2e/vmss.json)
    displayName: delete vmss
    condition: always()

- job: GenerateMatrix
  steps:
  - bash: |
      #string="{'scenario_gpu':{'SCENARIO_NAME':'vanilla-gpu','VM_SKU':'Standard_NC6'}, 'scenario_vanilla':{'SCENARIO_NAME':'vanilla-aks','VM_SKU':'Standard_DS2_v2'}}"
      string=$(cat e2e/matrix.json | jq tojson | sed 's/\\//g')
      echo "json is $string"
      echo "##vso[task.setVariable variable=legs;isOutput=true]"$string
    name: matrix

- job: AccessArtifact
  dependsOn:
    - E2E
    - GenerateMatrix
  strategy:
    matrix: $[ dependencies.GenerateMatrix.outputs['matrix.legs'] ]
      # scenario_gpu:
      #   SCENARIO_NAME: 'vanilla-gpu'
      #   VM_SKU: 'Standard_NC6'
      # scenario_vanilla:
      #   SCENARIO_NAME: 'vanilla-aks'
      #   VM_SKU: 'Standard_DS2_v2'
    maxParallel: 3
  steps:
  - download: current
    artifact: logs
  - bash: |
      set -x
      echo $SUBSCRIPTION_ID
      echo $RESOURCE_GROUP_NAME
      echo $LOCATION
      echo $CLUSTER_NAME
      # export SCENARIO_NAME
      # export $VM_SKU
      echo $SCENARIO_NAME
      echo $VM_SKU
      # pwd
      # echo "ls ing pwd"
      # ls
      # echo "cd into e2e before cping"
      # cd e2e
      # ls
      # cd ..
      # cp -a $(Pipeline.Workspace)/logs/* e2e
      # echo "cd ing into e2e"
      # cd e2e
      # ls
      # echo "in e2e"
      # echo $SCENARIO_NAME
      # bash ./e2e-scenario.sh
      # cd scenarios/$SCENARIO_NAME
      # ls