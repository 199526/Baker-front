trigger: none

# Three modes in prioritized order
# mode1: Hyper-Generation V2 mode
#    This mode is activated by setting env var HYPERV_GENERATION to V2 and generates a 1804 Gen2 Linux image
#    steps:
#    - Build VHD to a static SIG gallery, image with dynamic version (PackerSigGallery/1804Gen2/1.0.{{user `create_time`}})
#    - Also creates a managed image with dynamic name 1.0.{{user `create_time`}} under the same resource group
#    - Create a managed disk with dynamic name 1.0.{{user `create_time`}} from the SIG image.
#    - (offline) Export the managed disk SAS URL, download the VHD to local disk, rename the file to .vhd, upload it to a classic storage account and publish it to PIR.
#
# mode2: Shared Image Gallery mode
#    This modes is activated when mode 1 is not activated and by setting env var SIG_GALLERY_NAME/SIG_IMGAE_NAME/SIG_IMAGE_VERSION.
#    It is similar to mode 1 except it's not gen2 image and the SIG destination is dynamic
#    steps:
#    - Build VHD to a SIG gallery as specified by env var SIG_GALLERY_NAME/SIG_IMGAE_NAME/SIG_IMAGE_VERSION
#    - Also creates a managed image with name SIG_IMGAE_NAME
#
# default mode: Gen1+VHD
#    This default mode generates VHD and store it in a classic storage account.
#    steps:
#    - create an VHD in Packer to normal storage account
#    - copy from Packer storage account to classic storage account using AzCopy
#    - generate SAS link from azure CLI
#    - (offline)POST a new SKU to azure marketplace

variables:
  CONTAINER_IMAGE:  'quay.io/deis/go-dev:v1.26.0'
  MODE: 'default'

phases:
  - phase: build_vhd
    queue:
      name: Hosted Ubuntu 1604
      timeoutInMinutes: 120
    steps:
      - script: |
          echo gen${HYPERV_GENERATION} && \
          echo ${SIG_GALLERY_NAME} && \
          echo ${SIG_IMAGE_NAME} && \
          echo ${SIG_IMAGE_VERSION} && \
          if [[ ${HYPERV_GENERATION} == "V2" ]]; then m="mode1"; elif [[ -n ${SIG_GALLERY_NAME} && -n ${SIG_IMGAE_NAME} && -n ${SIG_IMAGE_VERSION} ]]; then m="mode2"; else m="default"; fi && \
          echo $m && \
          echo '##vso[task.setvariable variable=MODE]$m' && \
          echo $(MODE)
        displayName: Get Build Mode
      - script: |
          echo MODE=$(MODE) && \
          docker run --rm \
          -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
          -w /go/src/github.com/Azure/AgentBaker \
          -e CLIENT_ID=${CLIENT_ID} \
          -e CLIENT_SECRET="$(CLIENT_SECRET)" \
          -e TENANT_ID=${TENANT_ID} \
          -e AZURE_VM_SIZE=${AZURE_VM_SIZE} \
          -e AZURE_RESOURCE_GROUP_NAME=${AZURE_RESOURCE_GROUP_NAME} \
          -e AZURE_LOCATION=${AZURE_LOCATION} \
          -e FEATURE_FLAGS=${FEATURE_FLAGS} \
          -e GIT_VERSION=$(Build.SourceVersion) \
          -e BUILD_ID=$(Build.BuildId) \
          -e BUILD_NUMBER=$(Build.BuildNumber) \
          -e UBUNTU_SKU=${UBUNTU_SKU} \
          -e MODE=${MODE} \
          -e SIG_GALLERY_NAME=${SIG_GALLERY_NAME} \
          -e SIG_IMGAE_NAME=${SIG_IMGAE_NAME} \
          -e SIG_IMAGE_VERSION=${SIG_IMAGE_VERSION} \
          ${CONTAINER_IMAGE} make -f packer.mk run-packer
        displayName: Building VHD
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'vhd-release-notes'
          targetPath: 'release-notes.txt'
      - script: |
          echo MODE=$(MODE) && \
          OS_DISK_SAS="$(cat packer-output | grep "OSDiskUriReadOnlySas:" | cut -d " " -f 2)" && \
          docker run --rm \
          -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
          -w /go/src/github.com/Azure/AgentBaker \
          -e CLIENT_ID=${CLIENT_ID} \
          -e CLIENT_SECRET="$(CLIENT_SECRET)" \
          -e TENANT_ID=${TENANT_ID} \
          -e CLASSIC_BLOB=${CLASSIC_BLOB} \
          -e CLASSIC_SAS_TOKEN="$(SAS_TOKEN)" \
          -e OS_DISK_SAS=${OS_DISK_SAS} \
          ${CONTAINER_IMAGE} make -f packer.mk az-copy
        displayName: Copying resource to Classic Storage Account
        condition: and(eq(variables.DRY_RUN, 'False'), eq(variables.MODE, 'default'))
      - script: |
          echo MODE=$(MODE) && \
          SA_NAME="$(cat packer-output | grep "storage name:" | cut -d " " -f 3)" && \
          docker run --rm \
          -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
          -w /go/src/github.com/Azure/AgentBaker \
          -e CLIENT_ID=${CLIENT_ID} \
          -e CLIENT_SECRET="$(CLIENT_SECRET)" \
          -e TENANT_ID=${TENANT_ID} \
          -e SA_NAME=${SA_NAME} \
          -e AZURE_RESOURCE_GROUP_NAME=${AZURE_RESOURCE_GROUP_NAME} \
          ${CONTAINER_IMAGE} make -f packer.mk delete-sa
        displayName: Clean-up Storage Account
      - script: |
          echo MODE=$(MODE) && \
          create_time="$(cat vhdbuilder/packer/settings.json | grep "create_time" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
          if [[ ${MODE} == "mode1" ]]; then IMAGE_NAME="1.0.${create_time}"; else IMAGE_NAME=$SIG_IMGAE_NAME fi && \
          docker run --rm \
          -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
          -w /go/src/github.com/Azure/AgentBaker \
          -e CLIENT_ID=${CLIENT_ID} \
          -e CLIENT_SECRET="$(CLIENT_SECRET)" \
          -e TENANT_ID=${TENANT_ID} \
          -e IMAGE_NAME=${IMAGE_NAME} \
          -e AZURE_RESOURCE_GROUP_NAME=${AZURE_RESOURCE_GROUP_NAME} \
          ${CONTAINER_IMAGE} make -f packer.mk delete-mi
        displayName: Clean-up Managed Image
        condition: ne(variables.MODE, 'default')
      - script: |
          echo MODE=$(MODE) && \
          OS_DISK_SAS="$(cat packer-output | grep "OSDiskUriReadOnlySas:" | cut -d " " -f 2)" && \
          VHD_NAME="$(echo $OS_DISK_SAS | cut -d "/" -f 8 | cut -d "?" -f 1)" && \
          docker run --rm \
          -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
          -w /go/src/github.com/Azure/AgentBaker \
          -e CLIENT_ID=${CLIENT_ID} \
          -e CLIENT_SECRET="$(CLIENT_SECRET)" \
          -e TENANT_ID=${TENANT_ID} \
          -e CLASSIC_SA_CONNECTION_STRING="$(CLASSIC_SA_CONNECTION_STRING)" \
          -e STORAGE_ACCT_BLOB_URL=${CLASSIC_BLOB} \
          -e VHD_NAME=${VHD_NAME} \
          -e OS_NAME="Linux" \
          -e SKU_NAME=${UBUNTU_SKU} \
          -e OFFER_NAME="Ubuntu" \
          ${CONTAINER_IMAGE} make  -f packer.mk generate-sas
        displayName: Getting Shared Access Signature URI
        condition: and(eq(variables.DRY_RUN, 'False'), eq(variables.MODE, 'default'))
      - script: |
          echo MODE=$(MODE) && \
          create_time="$(cat vhdbuilder/packer/settings.json | grep "create_time" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
          docker run --rm \
          -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
          -w /go/src/github.com/Azure/AgentBaker \
          -e CLIENT_ID=${CLIENT_ID} \
          -e CLIENT_SECRET="$(CLIENT_SECRET)" \
          -e TENANT_ID=${TENANT_ID} \
          -e subscription_id="${SUBSCRIPTION_ID}" \
          -e resource_group_name="${AZURE_RESOURCE_GROUP_NAME}" \
          -e create_time="${create_time}" \
          -e location="${AZURE_LOCATION}" \
          -e os_type="Linux" \
          ${CONTAINER_IMAGE} make -f packer.mk create-managed-disk-from-sig
        displayName: Creating Managed Disk from Shared Image Gallery
        condition: and(eq(variables.DRY_RUN, 'False'), eq(variables.MODE, 'mode1'))
      - task: PublishPipelineArtifact@1
        inputs:
          artifactName: 'publishing-info'
          targetPath: 'vhd-publishing-info.json'
        condition: and(eq(variables.DRY_RUN, 'False'), ne(variables.MODE, 'mode2'))