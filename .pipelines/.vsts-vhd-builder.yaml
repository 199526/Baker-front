trigger: none

# steps:
# - create an VHD in Packer to normal storage account
# - copy from Packer storage account to classic storage account using AzCopy
# - generate SAS link from azure CLI
# - POST a new SKU to azure marketplace

variables:
  CONTAINER_IMAGE:  'quay.io/deis/go-dev:v1.26.0'

phases:
  - phase: build_vhd
    queue:
      name: Hosted Ubuntu 1604
      timeoutInMinutes: 120
    steps:
      - script: |
          docker run --rm \
          -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
          -w /go/src/github.com/Azure/AgentBaker \
          -e CLIENT_ID=${CLIENT_ID} \
          -e CLIENT_SECRET="$(CLIENT_SECRET)" \
          -e TENANT_ID=${TENANT_ID} \
          -e AZURE_VM_SIZE=${AZURE_VM_SIZE} \
          -e AZURE_RESOURCE_GROUP_NAME=${AZURE_RESOURCE_GROUP_NAME} \
          -e AZURE_LOCATION=${AZURE_LOCATION} \
          -e FEATURE_FLAGS=${FEATURE_FLAGS} \
          -e GIT_VERSION=$(Build.SourceVersion) \
          -e BUILD_ID=$(Build.BuildId) \
          -e BUILD_NUMBER=$(Build.BuildNumber) \
          -e UBUNTU_SKU=${UBUNTU_SKU} \
          -e HYPERV_GENERATION=${HYPERV_GENERATION} \
          ${CONTAINER_IMAGE} make  -f packer.mk run-packer
        displayName: Building VHD
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'vhd-release-notes'
          targetPath: 'release-notes.txt'
      - script: |
          OS_DISK_SAS="$(cat packer-output | grep "OSDiskUriReadOnlySas:" | cut -d " " -f 2)" && \
          docker run --rm \
          -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
          -w /go/src/github.com/Azure/AgentBaker \
          -e CLIENT_ID=${CLIENT_ID} \
          -e CLIENT_SECRET="$(CLIENT_SECRET)" \
          -e TENANT_ID=${TENANT_ID} \
          -e CLASSIC_BLOB=${CLASSIC_BLOB} \
          -e CLASSIC_SAS_TOKEN="$(SAS_TOKEN)" \
          -e OS_DISK_SAS=${OS_DISK_SAS} \
          ${CONTAINER_IMAGE} make -f packer.mk az-copy
        displayName: Copying resource to Classic Storage Account
        condition: and(eq(variables.DRY_RUN, 'False'), eq(variables.HYPERV_GENERATION, 'V1'))
      - script: |
          SA_NAME="$(cat packer-output | grep "storage name:" | cut -d " " -f 3)" && \
          docker run --rm \
          -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
          -w /go/src/github.com/Azure/AgentBaker \
          -e CLIENT_ID=${CLIENT_ID} \
          -e CLIENT_SECRET="$(CLIENT_SECRET)" \
          -e TENANT_ID=${TENANT_ID} \
          -e SA_NAME=${SA_NAME} \
          -e AZURE_RESOURCE_GROUP_NAME=${AZURE_RESOURCE_GROUP_NAME} \
          ${CONTAINER_IMAGE} make -f packer.mk delete-sa
        displayName: Clean-up Storage Account
        condition: eq(variables.HYPERV_GENERATION, 'V1')
      - script: |
          OS_DISK_SAS="$(cat packer-output | grep "OSDiskUriReadOnlySas:" | cut -d " " -f 2)" && \
          VHD_NAME="$(echo $OS_DISK_SAS | cut -d "/" -f 8 | cut -d "?" -f 1)" && \
          docker run --rm \
          -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
          -w /go/src/github.com/Azure/AgentBaker \
          -e CLIENT_ID=${CLIENT_ID} \
          -e CLIENT_SECRET="$(CLIENT_SECRET)" \
          -e TENANT_ID=${TENANT_ID} \
          -e CLASSIC_SA_CONNECTION_STRING="$(CLASSIC_SA_CONNECTION_STRING)" \
          -e STORAGE_ACCT_BLOB_URL=${CLASSIC_BLOB} \
          -e VHD_NAME=${VHD_NAME} \
          -e OS_NAME="Linux" \
          -e SKU_NAME=${UBUNTU_SKU} \
          -e OFFER_NAME="Ubuntu" \
          ${CONTAINER_IMAGE} make  -f packer.mk generate-sas
        displayName: Getting Shared Access Signature URI
        condition: and(eq(variables.DRY_RUN, 'False'), eq(variables.HYPERV_GENERATION, 'V1'))
      - script: |
          subscription_id="$(cat vhdbuilder/packer/settings.json | grep "subscription_id" | awk -F':' {print $2}')" && \
          resource_group_name="$(cat vhdbuilder/packer/settings.json | grep "resource_group_name" | awk -F':' {print $2}')" && \
          create_time="$(cat vhdbuilder/packer/settings.json | grep "create_time" | awk -F':' {print $2}')" && \
          c="$(cat vhdbuilder/packer/settings.json | grep "location" | awk -F':' {print $2}')" && \
          docker run --rm \
          -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
          -w /go/src/github.com/Azure/AgentBaker \
          -e CLIENT_ID=${CLIENT_ID} \
          -e CLIENT_SECRET="$(CLIENT_SECRET)" \
          -e TENANT_ID=${TENANT_ID} \
          -e subscription_id="$(subscription_id)" \
          -e resource_group_name=${resource_group_name} \
          -e create_time=${create_time} \
          -e create_time=${create_time} \
          ${CONTAINER_IMAGE} make  -f packer.mk generate-sig-info
        displayName: Getting Shared Image Gallery Info
        condition: and(eq(variables.DRY_RUN, 'False'), eq(variables.HYPERV_GENERATION, 'V2'))
      - task: PublishPipelineArtifact@1
        inputs:
          artifactName: 'publishing-info'
          targetPath: 'vhd-publishing-info.json'
        condition: eq(variables.DRY_RUN, 'False')